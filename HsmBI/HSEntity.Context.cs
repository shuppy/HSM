//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HsmBI
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class defaultcon : DbContext
    {
        public defaultcon()
            : base("name=defaultcon")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Academy> Academy { get; set; }
        public virtual DbSet<Attendance> Attendance { get; set; }
        public virtual DbSet<Availability> Availability { get; set; }
        public virtual DbSet<ChoirParts> ChoirParts { get; set; }
        public virtual DbSet<ChoirSplits> ChoirSplits { get; set; }
        public virtual DbSet<CodeAlgorithm> CodeAlgorithm { get; set; }
        public virtual DbSet<Events> Events { get; set; }
        public virtual DbSet<FriendshipGroups> FriendshipGroups { get; set; }
        public virtual DbSet<Members> Members { get; set; }
        public virtual DbSet<NextOfKins> NextOfKins { get; set; }
        public virtual DbSet<Occupations> Occupations { get; set; }
        public virtual DbSet<Positions_History> Positions_History { get; set; }
        public virtual DbSet<Posts> Posts { get; set; }
        public virtual DbSet<States> States { get; set; }
        public virtual DbSet<UserProfile> UserProfile { get; set; }
        public virtual DbSet<webpages_Membership> webpages_Membership { get; set; }
        public virtual DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public virtual DbSet<webpages_Roles> webpages_Roles { get; set; }
        public virtual DbSet<vwMembersList_Birthday> vwMembersList_Birthday { get; set; }
        public virtual DbSet<vwMembersList_General> vwMembersList_General { get; set; }
        public virtual DbSet<AccountItems> AccountItems { get; set; }
        public virtual DbSet<AccountTypes> AccountTypes { get; set; }
        public virtual DbSet<ledger> ledger { get; set; }
        public virtual DbSet<NominalLedger> NominalLedger { get; set; }
        public virtual DbSet<PLItems> PLItems { get; set; }
        public virtual DbSet<tickets> tickets { get; set; }
        public virtual DbSet<Dues> Dues { get; set; }
        public virtual DbSet<MonthlyDues> MonthlyDues { get; set; }
        public virtual DbSet<Vendors> Vendors { get; set; }
        public virtual DbSet<journals> journals { get; set; }
        public virtual DbSet<Transactions> Transactions { get; set; }
    
        public virtual int CreateLedgerAccount(Nullable<int> nominal, string description, Nullable<bool> controlAC)
        {
            var nominalParameter = nominal.HasValue ?
                new ObjectParameter("Nominal", nominal) :
                new ObjectParameter("Nominal", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var controlACParameter = controlAC.HasValue ?
                new ObjectParameter("ControlAC", controlAC) :
                new ObjectParameter("ControlAC", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateLedgerAccount", nominalParameter, descriptionParameter, controlACParameter);
        }
    
        public virtual int raiseJournal(string narration, Nullable<System.DateTime> transdate, Nullable<int> ticket, Nullable<int> refticket, Nullable<int> drAc, Nullable<int> crAc, Nullable<decimal> amount, Nullable<int> journaltype, Nullable<int> user)
        {
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var transdateParameter = transdate.HasValue ?
                new ObjectParameter("transdate", transdate) :
                new ObjectParameter("transdate", typeof(System.DateTime));
    
            var ticketParameter = ticket.HasValue ?
                new ObjectParameter("ticket", ticket) :
                new ObjectParameter("ticket", typeof(int));
    
            var refticketParameter = refticket.HasValue ?
                new ObjectParameter("refticket", refticket) :
                new ObjectParameter("refticket", typeof(int));
    
            var drAcParameter = drAc.HasValue ?
                new ObjectParameter("drAc", drAc) :
                new ObjectParameter("drAc", typeof(int));
    
            var crAcParameter = crAc.HasValue ?
                new ObjectParameter("crAc", crAc) :
                new ObjectParameter("crAc", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var journaltypeParameter = journaltype.HasValue ?
                new ObjectParameter("journaltype", journaltype) :
                new ObjectParameter("journaltype", typeof(int));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("raiseJournal", narrationParameter, transdateParameter, ticketParameter, refticketParameter, drAcParameter, crAcParameter, amountParameter, journaltypeParameter, userParameter);
        }
    }
}
